{"version":3,"sources":["images/Navbar image.png","components/About.js","components/Home.js","components/Contact.js","components/Projects.js","components/Navbar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","className","Home","src","alt","Contact","Projects","Navbar","navbarImage","to","Footer","id","href","target","rel","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,0C,gKCiB5BC,MAdf,WACE,OACE,yBAAKC,UAAU,SACb,qCACA,qDACA,0CACA,sCACA,2CCISC,MAXf,WACE,OACE,yBAAKD,UAAU,YACb,mCAAQ,6BAAR,eAA6B,6BAA7B,2BACA,yBAAKE,IAAI,GAAGC,IAAI,mCAChB,4GAAiF,6BAAjF,qGACoG,6BADpG,oCCISC,MATf,WACE,OACE,yBAAKJ,UAAU,OACb,8CCMSK,MATf,WACE,OACE,6BACE,+C,iBCoBSC,MAnBf,WACE,OACE,6BACE,yBAAKN,UAAU,aACb,4BACE,4BAAI,yBAAKA,UAAU,YAAYE,IAAKK,IAAaJ,IAAI,WACrD,4BAAI,kBAAC,IAAD,CAAMK,GAAI,KAAV,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAK,UAAX,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAK,YAAX,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAK,aAAX,eAIR,yBAAKR,UAAU,UCDNS,MAhBf,WACE,OACE,4BAAQC,GAAG,eACT,uBAAGC,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBACzD,uBAAGb,UAAU,mBAEf,uBAAGW,KAAK,wDAAwDC,OAAO,SAASC,IAAI,uBAClF,uBAAGb,UAAU,qBAEb,2BACI,8CADJ,eCmBOc,MArBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKd,UAAU,OAEb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,KAAK,cAAcC,UAAWf,IACrC,kBAAC,IAAD,CAAOc,KAAK,IAAIE,OAAK,EAACD,UAAWf,IACjC,kBAAC,IAAD,CAAOc,KAAK,SAASC,UAAWjB,IAChC,kBAAC,IAAD,CAAOgB,KAAK,YAAYC,UAAWX,IACnC,kBAAC,IAAD,CAAOU,KAAK,WAAWC,UAAWZ,KAEpC,kBAAC,EAAD,SCXYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5e1f57f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Navbar image.628af4e3.png\";","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"About\">\r\n      <h1>About</h1>\r\n      <h3>Education/Credentials</h3>\r\n      <h3>Experience</h3>\r\n      <h3>Skills</h3>\r\n      <h3>Interests</h3>\r\n\r\n        \r\n    </div> //App\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"homePage\">\r\n      <h1>Hi, <br></br>I'm Steven, <br></br> And I develop software</h1>\r\n      <img src=\"\" alt=\"Professional graphic of myself\"/>\r\n      <h4>On this website you can check out who I am and what I've been up to recently.<br></br>\r\n        If you're looking for someone skilled in developing or maintaining websites, software or databases<br></br> then I might be able to help.</h4>      \r\n    </div> //App\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Contact() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Contact Page</h1>\r\n      \r\n    </div> //App\r\n  );\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Projects() {\r\n  return (\r\n    <div>\r\n      <h1>Projects Page</h1>\r\n      \r\n    </div> //App\r\n  );\r\n}\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\nimport navbarImage from '../images/Navbar image.png';\r\nimport '../App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n//change from buttons to ul\r\nfunction Navbar() {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-links\">\r\n        <ul>\r\n          <li><img className=\"navbarImg\" src={navbarImage} alt=\"Error\" /></li>\r\n          <li><Link to ='/'>Home</Link></li>\r\n          <li><Link to = '/about'>About</Link></li>\r\n          <li><Link to = '/contact'>Contact</Link></li>\r\n          <li><Link to = '/projects'>Projects</Link></li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"clr\"></div>\r\n    </nav>\r\n   \r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer id=\"main-footer\">\r\n      <a href=\"https://github.com/Edwards97\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <i className=\"fab fa-github\"></i>\r\n      </a>\r\n      <a href=\"https://www.linkedin.com/in/steven-edwards-7951801a4/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <i className=\"fab fa-linkedin\"></i>\r\n      </a>\r\n        <p>\r\n            <em>Steven Edwards</em> &copy;2020\r\n        </p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport './App.css';\nimport About from './components/About';\nimport Home from './components/Home';\nimport Contact from './components/Contact';\nimport Projects from './components/Projects';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n      \n        <Navbar />\n        <Switch>\n          <Route path='/my-website' component={Home}/>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/about\" component={About}/>\n          <Route path=\"/projects\" component={Projects}/>\n          <Route path=\"/contact\" component={Contact}/>\n        </Switch>\n        <Footer />\n\n\n      </div> \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}